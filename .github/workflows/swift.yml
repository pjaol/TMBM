name: Swift CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason for manual trigger'
        required: false
        default: 'Manual build and test'

jobs:
  build:
    name: Build and Test
    runs-on: macos-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
        
    - name: Show Xcode version
      run: xcodebuild -version
      
    - name: Show Swift version
      run: swift --version
      
    - name: Make scripts executable
      run: |
        chmod +x scripts/*.sh

    - name: Setup Keychain
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        security create-keychain -p "${{ github.run_id }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ github.run_id }}" build.keychain
        security set-keychain-settings -t 3600 -l build.keychain
        security list-keychains -d user -s build.keychain login.keychain

    - name: Install Certificates
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        echo "${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT }}" | base64 --decode > application.p12
        echo "${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT }}" | base64 --decode > installer.p12
        security import application.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_ID_APPLICATION_CERT_PASSWORD }}" -T /usr/bin/codesign
        security import installer.p12 -k build.keychain -P "${{ secrets.APPLE_DEVELOPER_ID_INSTALLER_CERT_PASSWORD }}" -T /usr/bin/productsign
        rm -f application.p12 installer.p12
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ github.run_id }}" build.keychain
        security find-identity -v -p codesigning build.keychain
      
    - name: Build Core Package
      run: |
        cd CorePackage
        swift build -v
      
    - name: Test Core Package
      env:
        CI: true
      run: |
        cd CorePackage
        # Use --enable-test-discovery to find all tests
        # Use --sanitize=thread to help with async tests
        swift test --enable-test-discovery --sanitize=thread
      
    - name: Build App
      env:
        CI: true
      run: |
        ./scripts/build_app_bundle.sh
      
    - name: Lint Swift code
      run: |
        if command -v swiftlint &> /dev/null; then
          swiftlint
        else
          echo "SwiftLint not installed, skipping linting"
        fi

    - name: Sign and Package App
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      env:
        DEVELOPER_ID_APPLICATION: "Developer ID Application: patrick o'leary (8NQMHUGDM7)"
        DEVELOPER_ID_INSTALLER: "Developer ID Installer: patrick o'leary (8NQMHUGDM7)"
      run: |
        # List available identities
        security find-identity -v -p codesigning build.keychain
        
        # Sign the app bundle
        codesign --force --options runtime --sign "$DEVELOPER_ID_APPLICATION" --keychain build.keychain "build/TMBMApp.app"
        
        # Create and sign DMG
        ./scripts/create_dmg.sh
        productsign --sign "$DEVELOPER_ID_INSTALLER" --keychain build.keychain "build/TMBM-Installer.dmg" "build/TMBM-signed.dmg"
        mv "build/TMBM-signed.dmg" "build/TMBM-Installer.dmg"

    - name: Clean up Keychain
      if: always() && github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        security delete-keychain build.keychain
      
    - name: Archive app
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: |
        mkdir -p build
        cd build
        # Use absolute paths to avoid tar issues
        tar -czf TMBM-app.tar.gz -C $GITHUB_WORKSPACE App -C $GITHUB_WORKSPACE/build TMBMApp.app
      
    - name: Upload build artifacts
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: TMBM-build
        path: |
          ./build/TMBM-app.tar.gz
          ./build/TMBM-Installer.dmg
        retention-days: 7 